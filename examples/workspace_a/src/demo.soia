// Example of Soia features

// Struct definition with explicit field numbers
struct User {
  user_id: uint64 = 0;
  username: string = 1;
  email: string = 2;
  active: bool = 3;
}

// Enum definition
enum UserRole { 
  VIEWER;
  EDITOR;
  ADMIN;
}

// Enum with value fields
enum ApiResponse {
  SUCCESS;
  error: string;
  rate_limited: int32;  // Seconds to wait before retrying
}

// Example of keyed arrays
struct UserRegistry {
  users: [User|user_id];
}

// Example of optional types
struct UserSettings {
  theme: string?;
  notifications_enabled: bool;
  preferred_language: string?;
}

// Const definitions
const SYSTEM_USER: User = {
  user_id: 0,
  username: "system",
  email: "system@example.com",
  active: true,
};

const DEFAULT_ROLE: UserRole = "VIEWER";

const SERVER_ERROR: ApiResponse = {
  kind: "error",
  value: "Internal Server Error",
};

// Method definitions for RPC interface
method GetUser(uint64): User;
method UpdateUser(User): ApiResponse;

// Example of timestamp type
struct AuditLog {
  timestamp: timestamp;
  user_id: uint64;
  action: string;
}
